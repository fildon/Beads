import { playMove, startingState } from "./gameState";

describe("GameState", () => {
  it("startingState is inprogress with RED to play", () => {
    expect(startingState.phase).toEqual("â–¶");
    expect(startingState.nextToMove).toEqual("ðŸ”´");
  });

  it("changes nextToMove after a move", () => {
    expect(startingState.nextToMove).toEqual("ðŸ”´");
    expect(playMove(startingState, 3).nextToMove).toEqual("ðŸŸ¡");
  });

  it("detects a red horizontal win", () => {
    const nearlyRedWin: State = {
      nextToMove: "ðŸ”´",
      phase: "â–¶",
      board: [
        ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
        ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
        ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
        ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
        ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
        ["ðŸ”´", "ðŸ”´", "ðŸ”´", "âš«", "ðŸŸ¡", "ðŸŸ¡", "ðŸŸ¡"],
      ],
    };

    const redHasFourInARow = playMove(nearlyRedWin, 3);

    expect(redHasFourInARow.phase).toEqual("ðŸ”´");
  });
});
