import { isThisMoveAWin } from "./statePredicates";

describe("IsThisMoveAWin", () => {
  it("identifies a trivial non-win", () => {
    const afterFirstMove: Board = [
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "ðŸ”´", "âš«", "âš«", "âš«"],
    ];

    expect(isThisMoveAWin(afterFirstMove, { row: 5, col: 3 }, "ðŸ”´")).toBe(
      false
    );
  });

  it("identifies a horizontal win", () => {
    const winningMove: Board = [
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "ðŸ”´", "ðŸ”´", "ðŸ”´", "ðŸ”´"],
    ];

    expect(isThisMoveAWin(winningMove, { row: 5, col: 5 }, "ðŸ”´")).toBe(true);
  });

  it("requires win to be contiguous", () => {
    const winningMove: Board = [
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "ðŸ”´", "ðŸ”´", "ðŸ”´", "âš«", "ðŸ”´", "ðŸ”´"],
    ];

    expect(isThisMoveAWin(winningMove, { row: 5, col: 3 }, "ðŸ”´")).toBe(false);
  });

  it("identifies a vertical win", () => {
    const winningMove: Board = [
      ["âš«", "âš«", "ðŸŸ¡", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "ðŸŸ¡", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "ðŸŸ¡", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "ðŸŸ¡", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
    ];

    expect(isThisMoveAWin(winningMove, { row: 0, col: 2 }, "ðŸŸ¡")).toBe(true);
  });

  it("identifies sw-ne diagonal win", () => {
    const winningMove: Board = [
      ["âš«", "âš«", "âš«", "ðŸ”´", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "ðŸ”´", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "ðŸ”´", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["ðŸ”´", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
    ];

    expect(isThisMoveAWin(winningMove, { row: 0, col: 3 }, "ðŸ”´")).toBe(true);
  });

  it("identifies nw-se diagonal win", () => {
    const winningMove: Board = [
      ["âš«", "ðŸŸ¡", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "ðŸŸ¡", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "ðŸŸ¡", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "ðŸŸ¡", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
      ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"],
    ];

    expect(isThisMoveAWin(winningMove, { row: 2, col: 3 }, "ðŸŸ¡")).toBe(true);
  });
});
